# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gazebo_radiation_plugins/Snapshot.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import gazebo_radiation_plugins.msg

class Snapshot(genpy.Message):
  _md5sum = "88d99162d65f2a1a11f50289164215eb"
  _type = "gazebo_radiation_plugins/Snapshot"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """gazebo_radiation_plugins/Location at
gazebo_radiation_plugins/Location currentLoc
gazebo_radiation_plugins/Location position
gazebo_radiation_plugins/WayP wayPNow
gazebo_radiation_plugins/WayP wayPNext
gazebo_radiation_plugins/Command command
int16 inspected
float64 r
string radiationStatus

================================================================================
MSG: gazebo_radiation_plugins/Location
float64 x
float64 y

================================================================================
MSG: gazebo_radiation_plugins/WayP
int16 key
gazebo_radiation_plugins/Location pos

================================================================================
MSG: gazebo_radiation_plugins/Command
string name
int16 location
"""
  __slots__ = ['at','currentLoc','position','wayPNow','wayPNext','command','inspected','r','radiationStatus']
  _slot_types = ['gazebo_radiation_plugins/Location','gazebo_radiation_plugins/Location','gazebo_radiation_plugins/Location','gazebo_radiation_plugins/WayP','gazebo_radiation_plugins/WayP','gazebo_radiation_plugins/Command','int16','float64','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       at,currentLoc,position,wayPNow,wayPNext,command,inspected,r,radiationStatus

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Snapshot, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.at is None:
        self.at = gazebo_radiation_plugins.msg.Location()
      if self.currentLoc is None:
        self.currentLoc = gazebo_radiation_plugins.msg.Location()
      if self.position is None:
        self.position = gazebo_radiation_plugins.msg.Location()
      if self.wayPNow is None:
        self.wayPNow = gazebo_radiation_plugins.msg.WayP()
      if self.wayPNext is None:
        self.wayPNext = gazebo_radiation_plugins.msg.WayP()
      if self.command is None:
        self.command = gazebo_radiation_plugins.msg.Command()
      if self.inspected is None:
        self.inspected = 0
      if self.r is None:
        self.r = 0.
      if self.radiationStatus is None:
        self.radiationStatus = ''
    else:
      self.at = gazebo_radiation_plugins.msg.Location()
      self.currentLoc = gazebo_radiation_plugins.msg.Location()
      self.position = gazebo_radiation_plugins.msg.Location()
      self.wayPNow = gazebo_radiation_plugins.msg.WayP()
      self.wayPNext = gazebo_radiation_plugins.msg.WayP()
      self.command = gazebo_radiation_plugins.msg.Command()
      self.inspected = 0
      self.r = 0.
      self.radiationStatus = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6dh2dh2d().pack(_x.at.x, _x.at.y, _x.currentLoc.x, _x.currentLoc.y, _x.position.x, _x.position.y, _x.wayPNow.key, _x.wayPNow.pos.x, _x.wayPNow.pos.y, _x.wayPNext.key, _x.wayPNext.pos.x, _x.wayPNext.pos.y))
      _x = self.command.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2hd().pack(_x.command.location, _x.inspected, _x.r))
      _x = self.radiationStatus
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.at is None:
        self.at = gazebo_radiation_plugins.msg.Location()
      if self.currentLoc is None:
        self.currentLoc = gazebo_radiation_plugins.msg.Location()
      if self.position is None:
        self.position = gazebo_radiation_plugins.msg.Location()
      if self.wayPNow is None:
        self.wayPNow = gazebo_radiation_plugins.msg.WayP()
      if self.wayPNext is None:
        self.wayPNext = gazebo_radiation_plugins.msg.WayP()
      if self.command is None:
        self.command = gazebo_radiation_plugins.msg.Command()
      end = 0
      _x = self
      start = end
      end += 84
      (_x.at.x, _x.at.y, _x.currentLoc.x, _x.currentLoc.y, _x.position.x, _x.position.y, _x.wayPNow.key, _x.wayPNow.pos.x, _x.wayPNow.pos.y, _x.wayPNext.key, _x.wayPNext.pos.x, _x.wayPNext.pos.y,) = _get_struct_6dh2dh2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.command.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.command.name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.command.location, _x.inspected, _x.r,) = _get_struct_2hd().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.radiationStatus = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.radiationStatus = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6dh2dh2d().pack(_x.at.x, _x.at.y, _x.currentLoc.x, _x.currentLoc.y, _x.position.x, _x.position.y, _x.wayPNow.key, _x.wayPNow.pos.x, _x.wayPNow.pos.y, _x.wayPNext.key, _x.wayPNext.pos.x, _x.wayPNext.pos.y))
      _x = self.command.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2hd().pack(_x.command.location, _x.inspected, _x.r))
      _x = self.radiationStatus
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.at is None:
        self.at = gazebo_radiation_plugins.msg.Location()
      if self.currentLoc is None:
        self.currentLoc = gazebo_radiation_plugins.msg.Location()
      if self.position is None:
        self.position = gazebo_radiation_plugins.msg.Location()
      if self.wayPNow is None:
        self.wayPNow = gazebo_radiation_plugins.msg.WayP()
      if self.wayPNext is None:
        self.wayPNext = gazebo_radiation_plugins.msg.WayP()
      if self.command is None:
        self.command = gazebo_radiation_plugins.msg.Command()
      end = 0
      _x = self
      start = end
      end += 84
      (_x.at.x, _x.at.y, _x.currentLoc.x, _x.currentLoc.y, _x.position.x, _x.position.y, _x.wayPNow.key, _x.wayPNow.pos.x, _x.wayPNow.pos.y, _x.wayPNext.key, _x.wayPNext.pos.x, _x.wayPNext.pos.y,) = _get_struct_6dh2dh2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.command.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.command.name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.command.location, _x.inspected, _x.r,) = _get_struct_2hd().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.radiationStatus = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.radiationStatus = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2hd = None
def _get_struct_2hd():
    global _struct_2hd
    if _struct_2hd is None:
        _struct_2hd = struct.Struct("<2hd")
    return _struct_2hd
_struct_6dh2dh2d = None
def _get_struct_6dh2dh2d():
    global _struct_6dh2dh2d
    if _struct_6dh2dh2d is None:
        _struct_6dh2dh2d = struct.Struct("<6dh2dh2d")
    return _struct_6dh2dh2d
