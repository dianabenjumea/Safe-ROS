// Generated by gencpp from file gazebo_radiation_plugins/GenRandomEnvironmentalEffectsRequest.msg
// DO NOT EDIT!


#ifndef GAZEBO_RADIATION_PLUGINS_MESSAGE_GENRANDOMENVIRONMENTALEFFECTSREQUEST_H
#define GAZEBO_RADIATION_PLUGINS_MESSAGE_GENRANDOMENVIRONMENTALEFFECTSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gazebo_radiation_plugins
{
template <class ContainerAllocator>
struct GenRandomEnvironmentalEffectsRequest_
{
  typedef GenRandomEnvironmentalEffectsRequest_<ContainerAllocator> Type;

  GenRandomEnvironmentalEffectsRequest_()
    : folder()
    , number_of_radiation_sources(0)
    , number_of_rusting_models(0)
    , number_of_bending_models(0)
    , max_bend_factor(0.0)
    , max_rust_factor(0.0)  {
    }
  GenRandomEnvironmentalEffectsRequest_(const ContainerAllocator& _alloc)
    : folder(_alloc)
    , number_of_radiation_sources(0)
    , number_of_rusting_models(0)
    , number_of_bending_models(0)
    , max_bend_factor(0.0)
    , max_rust_factor(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _folder_type;
  _folder_type folder;

   typedef int16_t _number_of_radiation_sources_type;
  _number_of_radiation_sources_type number_of_radiation_sources;

   typedef int16_t _number_of_rusting_models_type;
  _number_of_rusting_models_type number_of_rusting_models;

   typedef int16_t _number_of_bending_models_type;
  _number_of_bending_models_type number_of_bending_models;

   typedef float _max_bend_factor_type;
  _max_bend_factor_type max_bend_factor;

   typedef float _max_rust_factor_type;
  _max_rust_factor_type max_rust_factor;





  typedef boost::shared_ptr< ::gazebo_radiation_plugins::GenRandomEnvironmentalEffectsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gazebo_radiation_plugins::GenRandomEnvironmentalEffectsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GenRandomEnvironmentalEffectsRequest_

typedef ::gazebo_radiation_plugins::GenRandomEnvironmentalEffectsRequest_<std::allocator<void> > GenRandomEnvironmentalEffectsRequest;

typedef boost::shared_ptr< ::gazebo_radiation_plugins::GenRandomEnvironmentalEffectsRequest > GenRandomEnvironmentalEffectsRequestPtr;
typedef boost::shared_ptr< ::gazebo_radiation_plugins::GenRandomEnvironmentalEffectsRequest const> GenRandomEnvironmentalEffectsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gazebo_radiation_plugins::GenRandomEnvironmentalEffectsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gazebo_radiation_plugins::GenRandomEnvironmentalEffectsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gazebo_radiation_plugins::GenRandomEnvironmentalEffectsRequest_<ContainerAllocator1> & lhs, const ::gazebo_radiation_plugins::GenRandomEnvironmentalEffectsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.folder == rhs.folder &&
    lhs.number_of_radiation_sources == rhs.number_of_radiation_sources &&
    lhs.number_of_rusting_models == rhs.number_of_rusting_models &&
    lhs.number_of_bending_models == rhs.number_of_bending_models &&
    lhs.max_bend_factor == rhs.max_bend_factor &&
    lhs.max_rust_factor == rhs.max_rust_factor;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gazebo_radiation_plugins::GenRandomEnvironmentalEffectsRequest_<ContainerAllocator1> & lhs, const ::gazebo_radiation_plugins::GenRandomEnvironmentalEffectsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gazebo_radiation_plugins

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gazebo_radiation_plugins::GenRandomEnvironmentalEffectsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gazebo_radiation_plugins::GenRandomEnvironmentalEffectsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_radiation_plugins::GenRandomEnvironmentalEffectsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_radiation_plugins::GenRandomEnvironmentalEffectsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_radiation_plugins::GenRandomEnvironmentalEffectsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_radiation_plugins::GenRandomEnvironmentalEffectsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gazebo_radiation_plugins::GenRandomEnvironmentalEffectsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1601fbc011dbf3b713e5f6ae36624db7";
  }

  static const char* value(const ::gazebo_radiation_plugins::GenRandomEnvironmentalEffectsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1601fbc011dbf3b7ULL;
  static const uint64_t static_value2 = 0x13e5f6ae36624db7ULL;
};

template<class ContainerAllocator>
struct DataType< ::gazebo_radiation_plugins::GenRandomEnvironmentalEffectsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gazebo_radiation_plugins/GenRandomEnvironmentalEffectsRequest";
  }

  static const char* value(const ::gazebo_radiation_plugins::GenRandomEnvironmentalEffectsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gazebo_radiation_plugins::GenRandomEnvironmentalEffectsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string folder\n"
"int16 number_of_radiation_sources\n"
"int16 number_of_rusting_models\n"
"int16 number_of_bending_models\n"
"float32 max_bend_factor\n"
"float32 max_rust_factor\n"
;
  }

  static const char* value(const ::gazebo_radiation_plugins::GenRandomEnvironmentalEffectsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gazebo_radiation_plugins::GenRandomEnvironmentalEffectsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.folder);
      stream.next(m.number_of_radiation_sources);
      stream.next(m.number_of_rusting_models);
      stream.next(m.number_of_bending_models);
      stream.next(m.max_bend_factor);
      stream.next(m.max_rust_factor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GenRandomEnvironmentalEffectsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gazebo_radiation_plugins::GenRandomEnvironmentalEffectsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gazebo_radiation_plugins::GenRandomEnvironmentalEffectsRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "folder: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.folder);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "number_of_radiation_sources: ";
    Printer<int16_t>::stream(s, indent + "  ", v.number_of_radiation_sources);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "number_of_rusting_models: ";
    Printer<int16_t>::stream(s, indent + "  ", v.number_of_rusting_models);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "number_of_bending_models: ";
    Printer<int16_t>::stream(s, indent + "  ", v.number_of_bending_models);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "max_bend_factor: ";
    Printer<float>::stream(s, indent + "  ", v.max_bend_factor);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "max_rust_factor: ";
    Printer<float>::stream(s, indent + "  ", v.max_rust_factor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GAZEBO_RADIATION_PLUGINS_MESSAGE_GENRANDOMENVIRONMENTALEFFECTSREQUEST_H
