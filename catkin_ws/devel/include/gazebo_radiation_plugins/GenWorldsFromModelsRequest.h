// Generated by gencpp from file gazebo_radiation_plugins/GenWorldsFromModelsRequest.msg
// DO NOT EDIT!


#ifndef GAZEBO_RADIATION_PLUGINS_MESSAGE_GENWORLDSFROMMODELSREQUEST_H
#define GAZEBO_RADIATION_PLUGINS_MESSAGE_GENWORLDSFROMMODELSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gazebo_radiation_plugins
{
template <class ContainerAllocator>
struct GenWorldsFromModelsRequest_
{
  typedef GenWorldsFromModelsRequest_<ContainerAllocator> Type;

  GenWorldsFromModelsRequest_()
    : folder()
    , model_filename()  {
    }
  GenWorldsFromModelsRequest_(const ContainerAllocator& _alloc)
    : folder(_alloc)
    , model_filename(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _folder_type;
  _folder_type folder;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _model_filename_type;
  _model_filename_type model_filename;





  typedef boost::shared_ptr< ::gazebo_radiation_plugins::GenWorldsFromModelsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gazebo_radiation_plugins::GenWorldsFromModelsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GenWorldsFromModelsRequest_

typedef ::gazebo_radiation_plugins::GenWorldsFromModelsRequest_<std::allocator<void> > GenWorldsFromModelsRequest;

typedef boost::shared_ptr< ::gazebo_radiation_plugins::GenWorldsFromModelsRequest > GenWorldsFromModelsRequestPtr;
typedef boost::shared_ptr< ::gazebo_radiation_plugins::GenWorldsFromModelsRequest const> GenWorldsFromModelsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gazebo_radiation_plugins::GenWorldsFromModelsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gazebo_radiation_plugins::GenWorldsFromModelsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gazebo_radiation_plugins::GenWorldsFromModelsRequest_<ContainerAllocator1> & lhs, const ::gazebo_radiation_plugins::GenWorldsFromModelsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.folder == rhs.folder &&
    lhs.model_filename == rhs.model_filename;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gazebo_radiation_plugins::GenWorldsFromModelsRequest_<ContainerAllocator1> & lhs, const ::gazebo_radiation_plugins::GenWorldsFromModelsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gazebo_radiation_plugins

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gazebo_radiation_plugins::GenWorldsFromModelsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gazebo_radiation_plugins::GenWorldsFromModelsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_radiation_plugins::GenWorldsFromModelsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_radiation_plugins::GenWorldsFromModelsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_radiation_plugins::GenWorldsFromModelsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_radiation_plugins::GenWorldsFromModelsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gazebo_radiation_plugins::GenWorldsFromModelsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aab9442741bfdbb3be9f5e426f1408ca";
  }

  static const char* value(const ::gazebo_radiation_plugins::GenWorldsFromModelsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaab9442741bfdbb3ULL;
  static const uint64_t static_value2 = 0xbe9f5e426f1408caULL;
};

template<class ContainerAllocator>
struct DataType< ::gazebo_radiation_plugins::GenWorldsFromModelsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gazebo_radiation_plugins/GenWorldsFromModelsRequest";
  }

  static const char* value(const ::gazebo_radiation_plugins::GenWorldsFromModelsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gazebo_radiation_plugins::GenWorldsFromModelsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string folder\n"
"string model_filename\n"
;
  }

  static const char* value(const ::gazebo_radiation_plugins::GenWorldsFromModelsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gazebo_radiation_plugins::GenWorldsFromModelsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.folder);
      stream.next(m.model_filename);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GenWorldsFromModelsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gazebo_radiation_plugins::GenWorldsFromModelsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gazebo_radiation_plugins::GenWorldsFromModelsRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "folder: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.folder);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "model_filename: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.model_filename);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GAZEBO_RADIATION_PLUGINS_MESSAGE_GENWORLDSFROMMODELSREQUEST_H
