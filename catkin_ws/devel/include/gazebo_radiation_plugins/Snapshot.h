// Generated by gencpp from file gazebo_radiation_plugins/Snapshot.msg
// DO NOT EDIT!


#ifndef GAZEBO_RADIATION_PLUGINS_MESSAGE_SNAPSHOT_H
#define GAZEBO_RADIATION_PLUGINS_MESSAGE_SNAPSHOT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <gazebo_radiation_plugins/Location.h>
#include <gazebo_radiation_plugins/Location.h>
#include <gazebo_radiation_plugins/Location.h>
#include <gazebo_radiation_plugins/WayP.h>
#include <gazebo_radiation_plugins/WayP.h>
#include <gazebo_radiation_plugins/Command.h>

namespace gazebo_radiation_plugins
{
template <class ContainerAllocator>
struct Snapshot_
{
  typedef Snapshot_<ContainerAllocator> Type;

  Snapshot_()
    : at()
    , currentLoc()
    , position()
    , wayPNow()
    , wayPNext()
    , command()
    , inspected(0)
    , r(0.0)
    , radiationStatus()  {
    }
  Snapshot_(const ContainerAllocator& _alloc)
    : at(_alloc)
    , currentLoc(_alloc)
    , position(_alloc)
    , wayPNow(_alloc)
    , wayPNext(_alloc)
    , command(_alloc)
    , inspected(0)
    , r(0.0)
    , radiationStatus(_alloc)  {
  (void)_alloc;
    }



   typedef  ::gazebo_radiation_plugins::Location_<ContainerAllocator>  _at_type;
  _at_type at;

   typedef  ::gazebo_radiation_plugins::Location_<ContainerAllocator>  _currentLoc_type;
  _currentLoc_type currentLoc;

   typedef  ::gazebo_radiation_plugins::Location_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::gazebo_radiation_plugins::WayP_<ContainerAllocator>  _wayPNow_type;
  _wayPNow_type wayPNow;

   typedef  ::gazebo_radiation_plugins::WayP_<ContainerAllocator>  _wayPNext_type;
  _wayPNext_type wayPNext;

   typedef  ::gazebo_radiation_plugins::Command_<ContainerAllocator>  _command_type;
  _command_type command;

   typedef int16_t _inspected_type;
  _inspected_type inspected;

   typedef double _r_type;
  _r_type r;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _radiationStatus_type;
  _radiationStatus_type radiationStatus;





  typedef boost::shared_ptr< ::gazebo_radiation_plugins::Snapshot_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gazebo_radiation_plugins::Snapshot_<ContainerAllocator> const> ConstPtr;

}; // struct Snapshot_

typedef ::gazebo_radiation_plugins::Snapshot_<std::allocator<void> > Snapshot;

typedef boost::shared_ptr< ::gazebo_radiation_plugins::Snapshot > SnapshotPtr;
typedef boost::shared_ptr< ::gazebo_radiation_plugins::Snapshot const> SnapshotConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gazebo_radiation_plugins::Snapshot_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gazebo_radiation_plugins::Snapshot_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gazebo_radiation_plugins::Snapshot_<ContainerAllocator1> & lhs, const ::gazebo_radiation_plugins::Snapshot_<ContainerAllocator2> & rhs)
{
  return lhs.at == rhs.at &&
    lhs.currentLoc == rhs.currentLoc &&
    lhs.position == rhs.position &&
    lhs.wayPNow == rhs.wayPNow &&
    lhs.wayPNext == rhs.wayPNext &&
    lhs.command == rhs.command &&
    lhs.inspected == rhs.inspected &&
    lhs.r == rhs.r &&
    lhs.radiationStatus == rhs.radiationStatus;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gazebo_radiation_plugins::Snapshot_<ContainerAllocator1> & lhs, const ::gazebo_radiation_plugins::Snapshot_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gazebo_radiation_plugins

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gazebo_radiation_plugins::Snapshot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gazebo_radiation_plugins::Snapshot_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_radiation_plugins::Snapshot_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_radiation_plugins::Snapshot_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_radiation_plugins::Snapshot_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_radiation_plugins::Snapshot_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gazebo_radiation_plugins::Snapshot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "88d99162d65f2a1a11f50289164215eb";
  }

  static const char* value(const ::gazebo_radiation_plugins::Snapshot_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x88d99162d65f2a1aULL;
  static const uint64_t static_value2 = 0x11f50289164215ebULL;
};

template<class ContainerAllocator>
struct DataType< ::gazebo_radiation_plugins::Snapshot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gazebo_radiation_plugins/Snapshot";
  }

  static const char* value(const ::gazebo_radiation_plugins::Snapshot_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gazebo_radiation_plugins::Snapshot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gazebo_radiation_plugins/Location at\n"
"gazebo_radiation_plugins/Location currentLoc\n"
"gazebo_radiation_plugins/Location position\n"
"gazebo_radiation_plugins/WayP wayPNow\n"
"gazebo_radiation_plugins/WayP wayPNext\n"
"gazebo_radiation_plugins/Command command\n"
"int16 inspected\n"
"float64 r\n"
"string radiationStatus\n"
"\n"
"================================================================================\n"
"MSG: gazebo_radiation_plugins/Location\n"
"float64 x\n"
"float64 y\n"
"\n"
"================================================================================\n"
"MSG: gazebo_radiation_plugins/WayP\n"
"int16 key\n"
"gazebo_radiation_plugins/Location pos\n"
"\n"
"================================================================================\n"
"MSG: gazebo_radiation_plugins/Command\n"
"string name\n"
"int16 location\n"
;
  }

  static const char* value(const ::gazebo_radiation_plugins::Snapshot_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gazebo_radiation_plugins::Snapshot_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.at);
      stream.next(m.currentLoc);
      stream.next(m.position);
      stream.next(m.wayPNow);
      stream.next(m.wayPNext);
      stream.next(m.command);
      stream.next(m.inspected);
      stream.next(m.r);
      stream.next(m.radiationStatus);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Snapshot_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gazebo_radiation_plugins::Snapshot_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gazebo_radiation_plugins::Snapshot_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "at: ";
    Printer< ::gazebo_radiation_plugins::Location_<ContainerAllocator> >::stream(s, indent + "  ", v.at);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "currentLoc: ";
    Printer< ::gazebo_radiation_plugins::Location_<ContainerAllocator> >::stream(s, indent + "  ", v.currentLoc);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "position: ";
    Printer< ::gazebo_radiation_plugins::Location_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "wayPNow: ";
    Printer< ::gazebo_radiation_plugins::WayP_<ContainerAllocator> >::stream(s, indent + "  ", v.wayPNow);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "wayPNext: ";
    Printer< ::gazebo_radiation_plugins::WayP_<ContainerAllocator> >::stream(s, indent + "  ", v.wayPNext);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "command: ";
    Printer< ::gazebo_radiation_plugins::Command_<ContainerAllocator> >::stream(s, indent + "  ", v.command);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "inspected: ";
    Printer<int16_t>::stream(s, indent + "  ", v.inspected);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "r: ";
    Printer<double>::stream(s, indent + "  ", v.r);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "radiationStatus: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.radiationStatus);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GAZEBO_RADIATION_PLUGINS_MESSAGE_SNAPSHOT_H
