// Generated by gencpp from file gazebo_radiation_plugins/ConvertWorldBuilderModelRequest.msg
// DO NOT EDIT!


#ifndef GAZEBO_RADIATION_PLUGINS_MESSAGE_CONVERTWORLDBUILDERMODELREQUEST_H
#define GAZEBO_RADIATION_PLUGINS_MESSAGE_CONVERTWORLDBUILDERMODELREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gazebo_radiation_plugins
{
template <class ContainerAllocator>
struct ConvertWorldBuilderModelRequest_
{
  typedef ConvertWorldBuilderModelRequest_<ContainerAllocator> Type;

  ConvertWorldBuilderModelRequest_()
    : world_builder_file()
    , gazebo_model_path()
    , noise_file()  {
    }
  ConvertWorldBuilderModelRequest_(const ContainerAllocator& _alloc)
    : world_builder_file(_alloc)
    , gazebo_model_path(_alloc)
    , noise_file(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _world_builder_file_type;
  _world_builder_file_type world_builder_file;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _gazebo_model_path_type;
  _gazebo_model_path_type gazebo_model_path;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _noise_file_type;
  _noise_file_type noise_file;





  typedef boost::shared_ptr< ::gazebo_radiation_plugins::ConvertWorldBuilderModelRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gazebo_radiation_plugins::ConvertWorldBuilderModelRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ConvertWorldBuilderModelRequest_

typedef ::gazebo_radiation_plugins::ConvertWorldBuilderModelRequest_<std::allocator<void> > ConvertWorldBuilderModelRequest;

typedef boost::shared_ptr< ::gazebo_radiation_plugins::ConvertWorldBuilderModelRequest > ConvertWorldBuilderModelRequestPtr;
typedef boost::shared_ptr< ::gazebo_radiation_plugins::ConvertWorldBuilderModelRequest const> ConvertWorldBuilderModelRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gazebo_radiation_plugins::ConvertWorldBuilderModelRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gazebo_radiation_plugins::ConvertWorldBuilderModelRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gazebo_radiation_plugins::ConvertWorldBuilderModelRequest_<ContainerAllocator1> & lhs, const ::gazebo_radiation_plugins::ConvertWorldBuilderModelRequest_<ContainerAllocator2> & rhs)
{
  return lhs.world_builder_file == rhs.world_builder_file &&
    lhs.gazebo_model_path == rhs.gazebo_model_path &&
    lhs.noise_file == rhs.noise_file;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gazebo_radiation_plugins::ConvertWorldBuilderModelRequest_<ContainerAllocator1> & lhs, const ::gazebo_radiation_plugins::ConvertWorldBuilderModelRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gazebo_radiation_plugins

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gazebo_radiation_plugins::ConvertWorldBuilderModelRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gazebo_radiation_plugins::ConvertWorldBuilderModelRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_radiation_plugins::ConvertWorldBuilderModelRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_radiation_plugins::ConvertWorldBuilderModelRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_radiation_plugins::ConvertWorldBuilderModelRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_radiation_plugins::ConvertWorldBuilderModelRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gazebo_radiation_plugins::ConvertWorldBuilderModelRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ca5346b14c3e8fe8c1488efbdb6aac5b";
  }

  static const char* value(const ::gazebo_radiation_plugins::ConvertWorldBuilderModelRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xca5346b14c3e8fe8ULL;
  static const uint64_t static_value2 = 0xc1488efbdb6aac5bULL;
};

template<class ContainerAllocator>
struct DataType< ::gazebo_radiation_plugins::ConvertWorldBuilderModelRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gazebo_radiation_plugins/ConvertWorldBuilderModelRequest";
  }

  static const char* value(const ::gazebo_radiation_plugins::ConvertWorldBuilderModelRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gazebo_radiation_plugins::ConvertWorldBuilderModelRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string world_builder_file\n"
"string gazebo_model_path\n"
"string noise_file\n"
;
  }

  static const char* value(const ::gazebo_radiation_plugins::ConvertWorldBuilderModelRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gazebo_radiation_plugins::ConvertWorldBuilderModelRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.world_builder_file);
      stream.next(m.gazebo_model_path);
      stream.next(m.noise_file);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConvertWorldBuilderModelRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gazebo_radiation_plugins::ConvertWorldBuilderModelRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gazebo_radiation_plugins::ConvertWorldBuilderModelRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "world_builder_file: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.world_builder_file);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "gazebo_model_path: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.gazebo_model_path);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "noise_file: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.noise_file);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GAZEBO_RADIATION_PLUGINS_MESSAGE_CONVERTWORLDBUILDERMODELREQUEST_H
