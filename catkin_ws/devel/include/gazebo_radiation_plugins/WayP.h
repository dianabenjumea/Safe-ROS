// Generated by gencpp from file gazebo_radiation_plugins/WayP.msg
// DO NOT EDIT!


#ifndef GAZEBO_RADIATION_PLUGINS_MESSAGE_WAYP_H
#define GAZEBO_RADIATION_PLUGINS_MESSAGE_WAYP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <gazebo_radiation_plugins/Location.h>

namespace gazebo_radiation_plugins
{
template <class ContainerAllocator>
struct WayP_
{
  typedef WayP_<ContainerAllocator> Type;

  WayP_()
    : key(0)
    , pos()  {
    }
  WayP_(const ContainerAllocator& _alloc)
    : key(0)
    , pos(_alloc)  {
  (void)_alloc;
    }



   typedef int16_t _key_type;
  _key_type key;

   typedef  ::gazebo_radiation_plugins::Location_<ContainerAllocator>  _pos_type;
  _pos_type pos;





  typedef boost::shared_ptr< ::gazebo_radiation_plugins::WayP_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gazebo_radiation_plugins::WayP_<ContainerAllocator> const> ConstPtr;

}; // struct WayP_

typedef ::gazebo_radiation_plugins::WayP_<std::allocator<void> > WayP;

typedef boost::shared_ptr< ::gazebo_radiation_plugins::WayP > WayPPtr;
typedef boost::shared_ptr< ::gazebo_radiation_plugins::WayP const> WayPConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gazebo_radiation_plugins::WayP_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gazebo_radiation_plugins::WayP_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gazebo_radiation_plugins::WayP_<ContainerAllocator1> & lhs, const ::gazebo_radiation_plugins::WayP_<ContainerAllocator2> & rhs)
{
  return lhs.key == rhs.key &&
    lhs.pos == rhs.pos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gazebo_radiation_plugins::WayP_<ContainerAllocator1> & lhs, const ::gazebo_radiation_plugins::WayP_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gazebo_radiation_plugins

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gazebo_radiation_plugins::WayP_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gazebo_radiation_plugins::WayP_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_radiation_plugins::WayP_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_radiation_plugins::WayP_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_radiation_plugins::WayP_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_radiation_plugins::WayP_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gazebo_radiation_plugins::WayP_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0b710348f6d9b37d2e3d0cc4a3be0ce8";
  }

  static const char* value(const ::gazebo_radiation_plugins::WayP_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0b710348f6d9b37dULL;
  static const uint64_t static_value2 = 0x2e3d0cc4a3be0ce8ULL;
};

template<class ContainerAllocator>
struct DataType< ::gazebo_radiation_plugins::WayP_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gazebo_radiation_plugins/WayP";
  }

  static const char* value(const ::gazebo_radiation_plugins::WayP_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gazebo_radiation_plugins::WayP_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 key\n"
"gazebo_radiation_plugins/Location pos\n"
"\n"
"================================================================================\n"
"MSG: gazebo_radiation_plugins/Location\n"
"float64 x\n"
"float64 y\n"
;
  }

  static const char* value(const ::gazebo_radiation_plugins::WayP_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gazebo_radiation_plugins::WayP_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.key);
      stream.next(m.pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WayP_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gazebo_radiation_plugins::WayP_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gazebo_radiation_plugins::WayP_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "key: ";
    Printer<int16_t>::stream(s, indent + "  ", v.key);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "pos: ";
    Printer< ::gazebo_radiation_plugins::Location_<ContainerAllocator> >::stream(s, indent + "  ", v.pos);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GAZEBO_RADIATION_PLUGINS_MESSAGE_WAYP_H
