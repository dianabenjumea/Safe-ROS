EASS

:name: planreasoner

:Initial Beliefs:

threshold(23)
chargePos(1, 1)

:Reasoning Rules:

feasible_plan(P, R) :- current_goal(X, Y), chargePos(X, Y), plan(P, L);
feasible_plan(P, R) :- plan(P, L), [L < R];

cleanedup :- ~plan(P, L);

:Initial Goals:


:Plans:

+select_plan : {B battery(Level), B threshold(T)} <-
	minus(Level, T, Reserve),
	+!select_plan(Reserve) [perform];
		
+!select_plan(Reserve) [perform] : {~ B plan(P, L), ~B plan_selected(_,_)} <-
	-select_plan,
	check_for_plans;

+!select_plan(Reserve) [perform] : {B feasible_plan(P,Reserve), B plan(P, L), ~B plan_selected(_,_)} <-
	+.lock,
	-plan(P,L),
	+plan_selected(P,L),
	-.lock,
	+!select_plan(Reserve) [perform];
+!select_plan(Reserve) [perform] : {B plan(_,_), ~B feasible_plan(_,Reserve)} <-
	+.lock,
 	-battery(_),
 	-select_plan,
 	+!cleanedup [achieve],
 	-plan_selected(_, _),
 	-.lock,
	inform_recharge;
+!select_plan(Reserve) [perform] : {B plan(P1,L1), B plan_selected(P2,L2), L1 < L2} <-
	+.lock,
	-plan(P1,L1),
	-plan_selected(P2,L2),
	+plan_selected(P1,L1),
	-.lock,
	+!select_plan(Reserve) [perform];
+!select_plan(Reserve) [perform] : {B plan(P1,L1), B plan_selected(P2,L2), L2 < L1} <-
	-plan(P1,L1),
	+!select_plan(Reserve) [perform];
+!select_plan [perform] : {B plan(P1,L1), B plan_selected(P2,L2), L2 == L1} <-
	-plan(P1,L1),
	+!select_plan(Reserve) [perform] ;
 +!select_plan(Reserve) [perform] : {~B plan(_,_), B plan_selected(P,L), B chargePos(X, Y), B current_goal(X, Y)} <-
 	+.lock,
 	-plan_selected(P, L),
 	-battery(_),
 	-select_plan,
 	-.lock,
 	execute(P);
 +!select_plan(Reserve) [perform] : {~B plan(_,_), B plan_selected(P,L), B chargePos(X, Y), ~B current_goal(X, Y), L  < Reserve} <-
 	+.lock,
 	-plan_selected(P, L),
 	-battery(_),
 	-select_plan,
 	-.lock,
 	execute(P);


+!cleanedup [achieve]: {B plan(P, L)} <-
	-plan(P, L);
